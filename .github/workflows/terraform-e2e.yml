name: terraform-e2e

on:
  # schedule:
  #   # cron is UTC time
  #   - cron: '0 18 * * *' # As of Beijing 02:00
  workflow_dispatch:
  workflow_call:
    inputs:
      branch:
        description: "Will run tests with code on this branch"
        required: true
        default: "master"
        type: string
      s3_bucket:
        description: "Where rpm is download from. (4x default: matrixdb-ci-nightly-artifacts/4x)"
        required: true
        default: "matrixdb-ci-nightly-artifacts"
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      CI_USER:
        required: true
      PAT:
        required: true

env:
  tf_version: 1.0.11
  tg_version: 0.35.13
  tf_working_dir: "terraform/integration"
  SSH_AUTH_SOCK: "/tmp/ssh_agent.sock"
  AWS_DEFAULT_REGION: "cn-northwest-1"

jobs:
  terraform-test:
    runs-on: ubuntu-20.04
    outputs:
      SSH_PRIV_KEY: ${{ steps.gp-behave-cluster-prepare-ssh-key-and-client.outputs.SSH_PRIV_KEY }}
    steps:
      - name: Set branch into env for terraform
        run: |
          echo "BRANCH=${{ inputs.branch }}" >> $GITHUB_ENV
      - uses: actions/checkout@v3
        with:
          ref: ${{ inputs.branch }}

      - name: Granting private modules access
        run: |
          git config --global url."https://${{secrets.CI_USER}}:${{secrets.PAT}}@github.com/ymatrix-data".insteadOf "https://github.com/ymatrix-data"
      - name: Check out mxlancer
        uses: actions/checkout@v3
      - name: Setup s3cmd CLI Tool
        uses: dbhao/s3cmd@main
        with:
          provider: aws
          region: 'cn-northwest-1'
          access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          host_base: 's3.cn-northwest-1.amazonaws.com.cn'
      - name: Download MatrixDB PKG From S3
        uses: nick-invision/retry@v2
        with:
          timeout_seconds: 120
          max_attempts: 5
          retry_on: timeout
          command: |
            mkdir nightly || true
            cd nightly
            rm -rf *
            s3cmd get --force $(s3cmd ls s3://${{inputs.s3_bucket}}/ | grep -v "debuginfo" | tail -1 | awk '{ print $4 }')
            cd ..
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version-file: go.mod
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.tf_version }}
          terraform_wrapper: false
      - name: Setup Terragrunt
        uses: autero1/action-terragrunt@v1.2.0
        with:
          terragrunt_version: ${{ env.tg_version }}
      - name: Use terragrunt to create cluster
        id: terragrunt
        working-directory: ${{ env.tf_working_dir }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          terragrunt init
          terragrunt validate
          terragrunt plan
          terragrunt apply -auto-approve
      - name: Wait for the cluster to be ready
        id: wait-for-cluster
        working-directory: ${{ env.tf_working_dir }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          echo "Waiting for cluster $CLUSTER_ID to be ready ..."

          export SFR_ID=$(terragrunt output -raw fleet_request)
          echo "SFR_ID=$SFR_ID" >> $GITHUB_ENV
          ../../scripts/wait_for_sfr_instances_running.sh "$SFR_ID"
          echo "Cluster $CLUSTER_ID is up."
      - name: Prepare SSH key and client
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          export WORK_DIR=$(pwd)
          pushd ${{ env.tf_working_dir }}
          terragrunt output -raw -no-color private_key | tee "$WORK_DIR"/cluster_key
          popd

          mkdir -p ~/.ssh
          chmod 400 cluster_key
          mv cluster_key ~/.ssh/

          pushd ~/.ssh
          echo "StrictHostKeyChecking no" >> config
          chmod 600 config

          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          ssh-add cluster_key
          popd

      - name: Gather Instance Information
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          CLUSTER_IPS=$(scripts/get_sfr_instance_ips.sh $SFR_ID)
          count=$(echo "$CLUSTER_IPS" | wc -l)
          if [ $count != "6" ]; then
            echo "Should have 6 instances in cluster but have $count. Fail now."
            exit 1
          fi

          readarray -t instances <<< $CLUSTER_IPS
          export MDW=$(echo "${instances[0]}" | cut -f 2)
          export MDW_PRIV=$(echo "${instances[0]}" | cut -f 3)
          export SMDW=$(echo "${instances[1]}" | cut -f 2)
          export SMDW_PRIV=$(echo "${instances[1]}" | cut -f 3)
          export SDW1=$(echo "${instances[2]}" | cut -f 2)
          export SDW1_PRIV=$(echo "${instances[2]}" | cut -f 3)
          export SDW2=$(echo "${instances[3]}" | cut -f 2)
          export SDW2_PRIV=$(echo "${instances[3]}" | cut -f 3)
          export SDW3=$(echo "${instances[4]}" | cut -f 2)
          export SDW3_PRIV=$(echo "${instances[4]}" | cut -f 3)
          export SDW4=$(echo "${instances[5]}" | cut -f 2)
          export SDW4_PRIV=$(echo "${instances[5]}" | cut -f 3)

          echo ${MDW} ${MDW_PRIV}
          echo ${SMDW} ${SMDW_PRIV}
          echo ${SDW1} ${SDW1_PRIV}
          echo ${SDW2} ${SDW2_PRIV}
          echo ${SDW3} ${SDW3_PRIV}
          echo ${SDW4} ${SDW4_PRIV}

          echo "MDW=${MDW}" >> $GITHUB_ENV
          echo "MDW_PRIV=${MDW_PRIV}" >> $GITHUB_ENV
          echo "SMDW=${SMDW}" >> $GITHUB_ENV
          echo "SMDW_PRIV=${SMDW_PRIV}" >> $GITHUB_ENV
          echo "SDW1=${SDW1}" >> $GITHUB_ENV
          echo "SDW1_PRIV=${SDW1_PRIV}" >> $GITHUB_ENV
          echo "SDW2=${SDW2}" >> $GITHUB_ENV
          echo "SDW2_PRIV=${SDW2_PRIV}" >> $GITHUB_ENV
          echo "SDW3=${SDW3}" >> $GITHUB_ENV
          echo "SDW3_PRIV=${SDW3_PRIV}" >> $GITHUB_ENV
          echo "SDW4=${SDW4}" >> $GITHUB_ENV
          echo "SDW4_PRIV=${SDW4_PRIV}" >> $GITHUB_ENV

      - name: Increase SSH connection threshold
        run: |
          for host in "${{ env.MDW }}" "${{ env.SDW1 }}" "${{ env.SDW2 }}" "${{ env.SDW3 }}" "${{ env.SDW4 }}" "${{ env.SMDW }}"; do
            ssh ec2-user@$host "bash -l" <<EOF
              sudo tee -a /etc/ssh/sshd_config > /dev/null <<- EOS
          MaxStartups 100:30:800
          MaxSessions 200
          ClientAliveInterval 240
          EOS
              sudo systemctl reload sshd.service
          EOF
          done;

      - name: Copy pkg to each host
        run: |
          echo "copy matrixdb rpm to MDW"
          scp -C nightly/matrixdb*.rpm ec2-user@${{ env.MDW }}:~

          echo "copy to all others"
          ssh ec2-user@${{ env.MDW }} "bash -euxo pipefail" << EOF
            scp matrixdb*.rpm ec2-user@${{ env.SMDW_PRIV }}:~ &
            scp matrixdb*.rpm ec2-user@${{ env.SDW1_PRIV }}:~ &
            scp matrixdb*.rpm ec2-user@${{ env.SDW2_PRIV }}:~ &
            scp matrixdb*.rpm ec2-user@${{ env.SDW3_PRIV }}:~ &
            scp matrixdb*.rpm ec2-user@${{ env.SDW4_PRIV }}:~ &
            wait
          EOF

      - name: Install pkg on each host
        timeout-minutes: 15
        run: |
          echo "install the latest version of matrixdb"
          ssh ec2-user@${{ env.MDW }} bash -c "'ls ~/matrixdb-*.rpm | tail -1 | xargs sudo yum --nogpgcheck -y localinstall'" &
          ssh ec2-user@${{ env.SMDW }} bash -c "'ls ~/matrixdb-*.rpm | tail -1 | xargs sudo yum --nogpgcheck -y localinstall'" &
          ssh ec2-user@${{ env.SDW1 }} bash -c "'ls ~/matrixdb-*.rpm | tail -1 | xargs sudo yum --nogpgcheck -y localinstall'" &
          ssh ec2-user@${{ env.SDW2 }} bash -c "'ls ~/matrixdb-*.rpm | tail -1 | xargs sudo yum --nogpgcheck -y localinstall'" &
          ssh ec2-user@${{ env.SDW3 }} bash -c "'ls ~/matrixdb-*.rpm | tail -1 | xargs sudo yum --nogpgcheck -y localinstall'" &
          ssh ec2-user@${{ env.SDW4 }} bash -c "'ls ~/matrixdb-*.rpm | tail -1 | xargs sudo yum --nogpgcheck -y localinstall'" &
          wait

      - name: Setup multi-host cluster with mxctl tool
        run: |
          ssh ec2-user@${{ env.MDW }} "bash -euxo pipefail" << EOF
            echo "" | sudo /usr/local/matrixdb/bin/mxctl setup collect > /tmp/collect.1
            export MXDEBUG_PRIMARY_PER_HOST=1
            cat /tmp/collect.1 | sudo /usr/local/matrixdb/bin/mxctl setup collect --host ${{ env.SDW1_PRIV }} > /tmp/collect.2
            cat /tmp/collect.2 | sudo /usr/local/matrixdb/bin/mxctl setup collect --host ${{ env.SDW2_PRIV }} > /tmp/collect.3
            cat /tmp/collect.3 | sudo /usr/local/matrixdb/bin/mxctl setup collect --host ${{ env.SMDW_PRIV }} > /tmp/collect.4
            cat /tmp/collect.4 | sudo /usr/local/matrixdb/bin/mxctl setup netcheck --mode cli > /tmp/collect.4c
            tac /tmp/collect.4c | sed '0,/"isSegment":\ true/{s/"isSegment":\ true/"isSegment":\ false/}' | tac > /tmp/collect.4d
            tac /tmp/collect.4d | sed '0,/"isStandby":\ false/{s/"isStandby":\ false/"isStandby":\ true/}' | tac > /tmp/collect.4e
            cat /tmp/collect.4e | sudo /usr/local/matrixdb/bin/mxbox deployer plan | tee /tmp/p4
            cat /tmp/p4 | sudo /usr/local/matrixdb/bin/mxbox deployer setup --debug
          EOF

      - name: Init databases and mxadmin
        run: |
          for host in "${{ env.MDW }}" "${{ env.SMDW }}" "${{ env.SDW1 }}" "${{ env.SDW2 }}"; do
            ssh "ec2-user@$host" "bash -euxo pipefail" <<- EOF
              sudo chown -R mxadmin:mxadmin /test_tbl_space

              sudo su - -p mxadmin -c 'bash -euxo pipefail' <<< "
                mkdir -p ~/.ssh
                echo \"StrictHostKeyChecking no\" >> ~/.ssh/config
                chmod 600 ~/.ssh/config
                mkdir -p /test_tbl_space/tes\ tt/test=/tbs
              "

              > /tmp/authorized_keys
              chmod 600 /tmp/authorized_keys
              cat ~/.ssh/authorized_keys | tee -a /tmp/authorized_keys
              sudo cat /home/mxadmin/.ssh/authorized_keys | tee -a /tmp/authorized_keys
              sudo cp -a /tmp/authorized_keys /home/mxadmin/.ssh/authorized_keys
              sudo chown mxadmin:mxadmin /home/mxadmin/.ssh/authorized_keys
              cp /tmp/authorized_keys ~/.ssh/authorized_keys
              rm -f /tmp/authorized_keys
              ls -al /
              ls -al /test_tbl_space/
          EOF
          done

          ssh mxadmin@${{ env.MDW }} "bash -l" << EOF
            set -euxo pipefail
            gpconfig -s max_connections
            gpconfig -s max_prepared_transactions
            gpconfig -s shared_buffers
            gpconfig -s gp_vmem_protect_limit

            gpconfig -r shared_buffers
            gpconfig -c max_connections -v 250 -m 80
            gpconfig -c max_prepared_transactions -v 250 -m 80
            mxstop -a -r -M fast

            gpconfig -s max_connections
            gpconfig -s max_prepared_transactions
            gpconfig -s shared_buffers
            gpconfig -s gp_vmem_protect_limit

            psql -d postgres -c "SELECT * FROM gp_segment_configuration;"
          EOF

      - name: Make tools for CI
        run: |
          make build

      - name: Change cylinder config to run more frequently
        run: |
          ssh ec2-user@${{ env.MDW }} "bash -euxo pipefail" << EOF
            sudo sed -i 's/bin\/cylinder/& --apm.interval 43 --tbs.interval 17 /' /etc/matrixdb/service/cylinder* || true
            sleep 1
            /usr/local/matrixdb/bin/supervisorctl update
            /usr/local/matrixdb/bin/supervisorctl restart \$(sudo head -n 1 /etc/matrixdb/service/cylinder* | cut -d ':' -f 2 | cut -d ']' -f 1)
            sleep 1
            ps aux | grep supervisor | grep -v grep
            sleep 5
            ps aux | grep cylinder | grep -v grep
            ps aux | grep mxui | grep -v grep
          EOF

      - name: Terraform Destroy
        if: ${{ always() }}
        id: destroy
        working-directory: ${{ env.tf_working_dir }}
        timeout-minutes: 10
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          terragrunt destroy -auto-approve -no-color

  report_on_success:
    # if: ${{ success() }}
    if: false
    needs: [terraform-test]
    runs-on: ubuntu-20.04
    steps:
      - name: Get current date
        id: date
        run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
      - name: Send notify to feishu
        uses: ymatrix-data/feishu-action@v3
        with:
          url: https://open.feishu.cn/open-apis/bot/v2/hook/3bf19687-f9a5-446e-a651-1dac0505af7a
          msg_type: post
          content: |
            post:
              zh_cn:
                title: ✅ ${{ steps.date.outputs.date }}.${{ inputs.branch }}.aws Cypress E2E passed
                content:
                - - tag: a
                    text: '${{ github.workflow }}#${{ github.run_number }}'
                    href: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
                - - tag: text
                    text: 'repo:  ${{ github.repository }}'

  report_on_failure:
    # if: ${{ failure() }}
    if: false
    needs: [terraform-test]
    runs-on: ubuntu-20.04
    steps:
      - name: Get current date
        id: date
        run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
      - name: Send notify to feishu
        uses: ymatrix-data/feishu-action@v3
        with:
          url: https://open.feishu.cn/open-apis/bot/v2/hook/3bf19687-f9a5-446e-a651-1dac0505af7a
          msg_type: post
          content: |
            post:
              zh_cn:
                title: 🔴 ${{ steps.date.outputs.date }}.${{ inputs.branch }}.aws Cypress E2E failed
                content:
                - - tag: a
                    text: '${{ github.workflow }}#${{ github.run_number }}'
                    href: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
                - - tag: text
                    text: 'repo:  ${{ github.repository }}'
