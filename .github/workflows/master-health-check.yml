name: master-health-check
# 1. build and test on master, and then report status to pipeline_status
# 2. build and upload storybook

on:
  push:
    branches: [master]
  workflow_dispatch:

env:
  pipeline_id: 5

jobs:
  start_pipeline:
    runs-on: ubuntu-20.04
    container:
      image: docker.pkg.github.com/ymatrix-data/matrixdb-ci/psqlci:latest
      credentials:
        username: ${{ secrets.CI_USER }}
        password: ${{ secrets.PAT }}
    steps:
      - run: |
          psql -c "DELETE FROM pipeline_status WHERE pipeline_id = ${{env.pipeline_id}} AND run_number = ${{github.run_number}} AND run_id = ${{github.run_id}}"
          psql -c "INSERT INTO pipeline_status(pipeline_id, run_number, run_id, event_dt, status) VALUES(${{env.pipeline_id}}, ${{github.run_number}}, ${{github.run_id}}, now(), 'start')"

  unit-test:
    needs: ['start_pipeline']
    uses: ./.github/workflows/pr-check.yml
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      CI_USER: ${{ secrets.CI_USER }}
      PAT: ${{ secrets.PAT }}

  integration:
    needs: ['start_pipeline']
    uses: ./.github/workflows/terraform-e2e.yml
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      CI_USER: ${{ secrets.CI_USER }}
      PAT: ${{ secrets.PAT }}

  report_on_success:
    if: ${{ success() }}
    needs: [unit-test, integration]
    runs-on: ubuntu-20.04
    container:
      image: docker.pkg.github.com/ymatrix-data/matrixdb-ci/psqlci:latest
      credentials:
        username: ${{ secrets.CI_USER }}
        password: ${{ secrets.PAT }}
    steps:
      - run: |
          psql -c "INSERT INTO pipeline_status(pipeline_id, run_number, run_id, event_dt, status) VALUES(${{env.pipeline_id}}, ${{github.run_number}}, ${{github.run_id}}, now(), 'done')"
      # - name: Send notify to feishu
      #   uses: ymatrix-data/feishu-action@v3
      #   with:
      #     url: https://open.feishu.cn/open-apis/bot/v2/hook/3414e5e0-5197-4fdc-ab76-0d5d0bf46429
      #     msg_type: post
      #     content: |
      #       post:
      #         zh_cn:
      #           title: ${{ github.repository }} CI success ✅
      #           content:
      #           - - tag: text
      #               text: 'workflow: ${{ github.workflow }}'
      #           - - tag: text
      #               text: 'by ${{ github.actor }}'

  report_on_cancel:
    if: ${{ cancelled() }}
    needs: [unit-test, integration]
    runs-on: ubuntu-20.04
    container:
      image: docker.pkg.github.com/ymatrix-data/matrixdb-ci/psqlci:latest
      credentials:
        username: ${{ secrets.CI_USER }}
        password: ${{ secrets.PAT }}
    steps:
      - run: |
          psql -c "INSERT INTO pipeline_status(pipeline_id, run_number, run_id, event_dt, status) VALUES(${{env.pipeline_id}}, ${{github.run_number}}, ${{github.run_id}}, now(), 'cancel')"

  report_on_failure:
    if: ${{ failure() }}
    needs: [unit-test, integration]
    runs-on: ubuntu-20.04
    container:
      image: docker.pkg.github.com/ymatrix-data/matrixdb-ci/psqlci:latest
      credentials:
        username: ${{ secrets.CI_USER }}
        password: ${{ secrets.PAT }}
    steps:
      - run: |
          psql -c "INSERT INTO pipeline_status(pipeline_id, run_number, run_id, event_dt, status) VALUES(${{env.pipeline_id}}, ${{github.run_number}}, ${{github.run_id}}, now(), 'error')"
      - name: Send notify to feishu
        uses: ymatrix-data/feishu-action@v3
        with:
          url: https://open.feishu.cn/open-apis/bot/v2/hook/3414e5e0-5197-4fdc-ab76-0d5d0bf46429
          msg_type: post
          content: |
            post:
              zh_cn:
                title: ${{ github.repository }} master health check failure ❌
                content:
                - - tag: text
                    text: 'workflow: ${{ github.workflow }}'
                - - tag: text
                    text: 'by: ${{ github.actor }}'
                - - tag: a
                    text: 'More information'
                    href: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

  storybook-deployment:
    if: ${{ success() }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # 👈 Required to retrieve git history

      # Restore cache for yarn
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT

      - name: Restore yarn cache
        uses: actions/cache@v3
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Yarn Install
        run: |
          cd websrc
          yarn install --prefer-offline --frozen-lockfile

      - uses: chromaui/action@v1
        # Options required for Chromatic's GitHub Action
        with:
          #👇 Chromatic projectToken, see https://storybook.js.org/tutorials/intro-to-storybook/react/en/deploy/ to obtain it
          projectToken: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}
          workingDir: websrc
          token: ${{ secrets.GITHUB_TOKEN }}
          autoAcceptChanges: true
